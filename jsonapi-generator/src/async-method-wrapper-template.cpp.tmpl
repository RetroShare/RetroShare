/*
 * RetroShare JSON API
 * Copyright (C) 2018  Gioacchino Mazzurco <gio@eigenlab.org>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

registerHandler("$%apiPath%$",
		[$%captureVars%$](const std::shared_ptr<rb::Session> session)
{
	const std::multimap<std::string, std::string> headers
	{
		{ "Connection", "keep-alive" },
		{ "Content-Type", "text/event-stream" }
	};
	session->yield(rb::OK, headers);

	size_t reqSize = session->get_request()->get_header("Content-Length", 0);
	session->fetch( reqSize, [$%captureVars%$](
					const std::shared_ptr<rb::Session> session,
					const rb::Bytes& body )
	{
		INITIALIZE_API_CALL_JSON_CONTEXT;

		if( !checkRsServicePtrReady(
		            $%instanceName%$, "$%instanceName%$", cAns, session ) )
			return;

$%paramsDeclaration%$

$%inputParamsDeserialization%$

		$%callbackName%$ = [session]($%callbackParams%$)
		{
$%callbackParamsSerialization%$

			std::stringstream message;
			message << "data: " << compactJSON << ctx.mJson << "\n\n";
			session->yield(message.str());
			$%sessionEarlyClose%$
		};

$%functionCall%$

$%outputParamsSerialization%$

		// return them to the API caller
		std::stringstream message;
		message << "data: " << compactJSON << cAns.mJson << "\n\n";
		session->yield(message.str());
		$%sessionDelayedClose%$
	} );
}, $%requiresAuth%$);

