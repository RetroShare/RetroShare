/*******************************************************************************
 * RetroShare JSON API                                                         *
 *                                                                             *
 * Copyright (C) 2018-2019  Gioacchino Mazzurco <gio@eigenlab.org>             *
 *                                                                             *
 * This program is free software: you can redistribute it and/or modify        *
 * it under the terms of the GNU Affero General Public License version 3 as    *
 * published by the Free Software Foundation.                                  *
 *                                                                             *
 * This program is distributed in the hope that it will be useful,             *
 * but WITHOUT ANY WARRANTY; without even the implied warranty of              *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the               *
 * GNU Affero General Public License for more details.                         *
 *                                                                             *
 * You should have received a copy of the GNU Affero General Public License    *
 * along with this program. If not, see <https://www.gnu.org/licenses/>.       *
 *                                                                             *
 *******************************************************************************/

registerHandler( "$%apiPath%$",
                 [this](const std::shared_ptr<rb::Session> session)
{
	const std::multimap<std::string, std::string> headers
	{
		{ "Connection", "keep-alive" },
		{ "Content-Type", "text/event-stream" }
	};
	session->yield(rb::OK, headers);

	size_t reqSize = session->get_request()->get_header("Content-Length", 0);
	session->fetch( reqSize, [this](
					const std::shared_ptr<rb::Session> session,
					const rb::Bytes& body )
	{
		INITIALIZE_API_CALL_JSON_CONTEXT;

		if( !checkRsServicePtrReady(
		            $%instanceName%$, "$%instanceName%$", cAns, session ) )
			return;

$%paramsDeclaration%$

$%inputParamsDeserialization%$

		const std::weak_ptr<rb::Service> weakService(mService);
		const std::weak_ptr<rb::Session> weakSession(session);
		$%callbackName%$ = [weakService, weakSession]($%callbackParams%$)
		{
			auto session = weakSession.lock();
			if(!session || session->is_closed()) return;

			auto lService = weakService.lock();
			if(!lService || lService->is_down()) return;

$%callbackParamsSerialization%$

			std::stringstream sStream;
			sStream << "data: " << compactJSON << ctx.mJson << "\n\n";
			const std::string message = sStream.str();

			lService->schedule( [weakSession, message]()
			{
				auto session = weakSession.lock();
				if(!session || session->is_closed()) return;
				session->yield(message);
				$%sessionEarlyClose%$
			} );
		};

$%functionCall%$

$%outputParamsSerialization%$

		// return them to the API caller
		std::stringstream message;
		message << "data: " << compactJSON << cAns.mJson << "\n\n";
		session->yield(message.str());
		$%sessionDelayedClose%$
	} );
}, $%requiresAuth%$ );
